%!PS-Adobe-3.0
%%Title: Trie.hs
%%For: fluffy
%%Creator: NVIM v0.2.0
%%CreationDate: Fri Nov 10 11:04:40 2017
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/local/Cellar/neovim/0.2.0_1/share/nvim/runtime/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/local/Cellar/neovim/0.2.0_1/share/nvim/runtime/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(Trie.hs                                                                       Page 1)59.5 792.4 ms
F0 sf
(module Trie where)59.5 772.4 ms
(import Types)59.5 752.4 ms
(import Data.Maybe)59.5 732.4 ms
(import qualified Data.Map as Map)59.5 722.4 ms
(import qualified Data.Set as Set)59.5 712.4 ms
(import Debug.Trace)59.5 702.4 ms
(data Trie a = Trie { children )59.5 682.4 ms
0 0.498 0.498 r
(::)s
0 g
( Map.Map a \(Trie a\) })s
(  deriving \(Show\))59.5 672.4 ms
(emptyTrie )59.5 652.4 ms
0 0.498 0.498 r
(::)s
0 g
( Trie PatToken)s
(emptyTrie = Trie { children = Map.empty })59.5 642.4 ms
(isEnd )59.5 622.4 ms
0 0.498 0.498 r
(::)s
0 g
( Trie PatToken -> Bool)s
(isEnd t = Map.null \(children t\))59.5 612.4 ms
(expandPat )59.5 592.4 ms
0 0.498 0.498 r
(::)s
0 g
( Env -> PatToken -> Pattern -> Pattern)s
(expandPat env pt pat =)59.5 582.4 ms
(  let len = arityOfPatToken env pt in)59.5 572.4 ms
(  generateWildcards len pat)59.5 562.4 ms
(arityOfPatToken )59.5 542.4 ms
0 0.498 0.498 r
(::)s
0 g
( Env -> PatToken -> Int)s
(arityOfPatToken env pat = case Map.lookup pat env of)59.5 532.4 ms
(  Nothing -> error $ "Unable to find constructor: " ++ show pat)59.5 522.4 ms
(  Just kids -> fromJust $ Map.lookup pat kids)59.5 512.4 ms
(generateWildcards )59.5 492.4 ms
0 0.498 0.498 r
(::)s
0 g
( Int -> Pattern -> Pattern)s
(generateWildcards 0 continuation = continuation)59.5 482.4 ms
(generateWildcards len continuation =)59.5 472.4 ms
(  Pat PTWild $ Just $ generateWildcards \(len - 1\) continuation)59.5 462.4 ms
(isCompleteLevel )59.5 442.4 ms
0 0.498 0.498 r
(::)s
0 g
( Env -> Map.Map PatToken \(Trie PatToken\) -> Bool)s
(isCompleteLevel env children =)59.5 432.4 ms
(  let nonWildcards = Map.filterWithKey \(\\k _ -> k /= PTWild\) children in)59.5 422.4 ms
(  trace \("IS COMPL: " ++ show nonWildcards\) $)59.5 412.4 ms
(  )59.5 402.4 ms
0 0.498 0.498 r
(if)s
0 g
( Map.null nonWildcards )s
0 0.498 0.498 r
(then)s
0 g
( False )s
0 0.498 0.498 r
(else)s
0 g
(    )59.5 392.4 ms
0.498 0.498 0 r
(-- Now grab an example elem)s
0 g
(    let \(exampleElem, _\) = Map.findMin nonWildcards)59.5 382.4 ms
(        )59.5 372.4 ms
0.498 0.498 0 r
(-- Grab the constructors that we expect)s
0 g
(        sigmaSize = Map.size $ fromJust \(Map.lookup exampleElem env\))59.5 362.4 ms
(        )59.5 352.4 ms
0.498 0.498 0 r
(-- Grab the constructors that we _have_)s
0 g
(        constrSize = Map.size nonWildcards in)59.5 342.4 ms
(    sigmaSize == constrSize)59.5 332.4 ms
0.498 0.498 0 r
(-- | Given a pattern @p, determine if that pattern is in the trie)59.5 312.4 ms
0 g
(useful )59.5 302.4 ms
0 0.498 0.498 r
(::)s
0 g
( Env -> Pattern -> Trie PatToken -> \(Trie PatToken, Bool\))s
(useful env \(Pat PTWild Nothing\) \(Trie t\) = )59.5 292.4 ms
(  case isCompleteLevel env t of)59.5 282.4 ms
(    True -> \(Trie t, False\))59.5 272.4 ms
(    False -> case Map.lookup PTWild t of)59.5 262.4 ms
(                  Nothing -> \(Trie \(Map.insert PTWild emptyTrie t\), True\))59.5 252.4 ms
(                  Just l -> \(Trie t, False\))59.5 242.4 ms
(useful env \(Pat p Nothing\) \(Trie t\) = )59.5 232.4 ms
(  case Map.lookup p t of)59.5 222.4 ms
(    Nothing -> \(Trie \(Map.insert p emptyTrie t\), True\))59.5 212.4 ms
(    Just l -> \(Trie t, False\))59.5 202.4 ms
(useful env \(Pat p \(Just rest\)\) \(Trie children\) =)59.5 192.4 ms
(  case p of)59.5 182.4 ms
(    PTConstr str ->)59.5 172.4 ms
(      case Map.lookup p children of)59.5 162.4 ms
(        Nothing -> )59.5 152.4 ms
(          let \(trie, _\) = useful env rest emptyTrie in)59.5 142.4 ms
(          \(Trie \(Map.insert p trie children\), True\))59.5 132.4 ms
(        Just node ->)59.5 122.4 ms
(          let \(trie, b\) = useful env rest node in)59.5 112.4 ms
(          \(Trie \(Map.insert p trie children\), b\))59.5 102.4 ms
(    PTWild ->)59.5 92.4 ms
(       )59.5 82.4 ms
0 0.498 0.498 r
(if)s
0 g
( isCompleteLevel env children)s
(       )59.5 72.4 ms
0 0.498 0.498 r
(then)s
0 g
(          )59.5 62.4 ms
0.498 0.498 0 r
(-- for each pattern token in children generate wildcards of the proper)s
0 g
(          )59.5 52.4 ms
0.498 0.498 0 r
(-- arity and then go down that constructors path)s
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(Trie.hs                                                                       Page 2)59.5 792.4 ms
F0 sf
(          )59.5 772.4 ms
0.498 0.498 0 r
(-- Expand out the pattern so that it has the proper number of wildcards)s
0 g
(          )59.5 762.4 ms
0.498 0.498 0 r
(-- to match the arity of the constructor of edge that we are traversing.)s
0 g
(          let res = \(flip Map.mapWithKey\) children \(\\k node -> let rest' = expandPat)59.5 752.4 ms
( env k rest in)59.5 742.4 ms
(                          let \(trie, b\) = useful env rest' node in)59.5 732.4 ms
(                          \(Trie \(Map.insert p trie children\), b\)\) in)59.5 722.4 ms
(          let res' = Map.filter snd res in)59.5 712.4 ms
(          )59.5 702.4 ms
0 0.498 0.498 r
(if)s
0 g
( not \(Map.null res'\))s
(          )59.5 692.4 ms
0 0.498 0.498 r
(then)s
0 g
( let \(_, \(trie, b\)\) = \(Map.findMin res'\) in)s
(               \(Trie \(Map.insert p trie children\), b\))59.5 682.4 ms
(          )59.5 672.4 ms
0 0.498 0.498 r
(else)s
0 g
( \(Trie children, False\))s
(       )59.5 662.4 ms
0 0.498 0.498 r
(else)s
0 g
(         let wildcard = Map.filterWithKey \(\\k _ -> k == PTWild\) children in)59.5 652.4 ms
(          case Map.size wildcard of)59.5 642.4 ms
(            0 -> )59.5 632.4 ms
(              let \(trie, b\) = useful env rest emptyTrie in)59.5 622.4 ms
(              \(Trie \(Map.insert p trie children\), b\))59.5 612.4 ms
(            _ -> let \(trie, b\) = useful env rest \(snd $ Map.findMin wildcard\) in)59.5 602.4 ms
(                 \(Trie \(Map.insert p trie children\), b\))59.5 592.4 ms
(exhaustive )59.5 572.4 ms
0 0.498 0.498 r
(::)s
0 g
( Env -> Match -> \(Trie PatToken, Bool\))s
(exhaustive env \(Match str ps\) =)59.5 562.4 ms
(  let check trie pats = case pats of)59.5 552.4 ms
(        [] -> )59.5 542.4 ms
(          let \(t, b\) = useful env patwild trie in)59.5 532.4 ms
(          )59.5 522.4 ms
0 0.498 0.498 r
(if)s
0 g
( b )s
0 0.498 0.498 r
(then)s
0 g
( \(t, False\))s
(          )59.5 512.4 ms
0 0.498 0.498 r
(else)s
0 g
( \(t,True\))s
(        \(p)59.5 502.4 ms
0 0.498 0.498 r
(:)s
0 g
(ps\) ->)s
(          let pp = convertPat p Nothing in)59.5 492.4 ms
(          let \(trie', b\) = useful env pp trie in)59.5 482.4 ms
(          )59.5 472.4 ms
0 0.498 0.498 r
(if)s
0 g
( b )s
0 0.498 0.498 r
(then)s
0 g
( check trie' ps)s
(          )59.5 462.4 ms
0 0.498 0.498 r
(else)s
0 g
( trace \(show trie'\) $)s
(          error \("Dead pattern found " ++ show p\))59.5 452.4 ms
(  in check emptyTrie ps)59.5 442.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 2
%%EOF
